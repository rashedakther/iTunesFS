What is it?
===========

iTunesFS allows you to mount the "iTunes Music Library.xml" file as a file
system, using the excellent MacFUSE (http://code.google.com/p/macfuse/).
As of version 1.1, all local iPods will also be mounted in the similar
fashion. All playlists of either iTunes or the iPods are exposed as
directories, with their respective entries. The order of tracks within the
playlists is maintained by prefixing the tracks with their playlist index.

Please note that you have to install MacFUSE Core 0.3.0 before you can use
iTunesFS! MacFUSE Core is available at http://code.google.com/p/macfuse/.

As of version 1.1.3, you can also build this application using GNUstep on any
supported unix-like system (i.e. FreeBSD). Please read README-GNUstep for
further information regarding FUSE and GNUstep.


Further information
===================

The iTunesFS homepage is at
http://www.mulle-kybernetik.com/software/iTunesFS.

Sourcecode is available via anonymous Subversion (svn) access at
http://svn.mulle-kybernetik.com/iTunesFS. For license information have a
look at the 'COPYING' file.
In case you have further questions, feel free to write an email to
Marcus Mueller <znek@mulle-kybernetik.com>.


Defaults
========

For users
---------

Name                 | Type   | Description
---------------------+--------+----------------------------------------------
NoIPods              | BOOL   | If YES, don't scan for iPods and instead
(NO)                 |        | of displaying "libraries" at root level
                     |        | display playlists of iTunes library
SymbolicLinks        | BOOL   | If YES, use symbolic links for tracks instead
(NO)                 |        | of "faking" the existence of files
UseCategories        | BOOL   | If YES, display "Playlists", "Artists" and
(YES)                |        | "Albums" as virtual folders
AlbumsTrackFormat    | String | The format string to use for formatting track
                     |        | names in "Albums", "Songs" or "Artists"
                     |        | folders. Read "Formatters" section for details
PlaylistsTrackFormat | String | The format string to use for formatting track
                     |        | names in "Playlists" folders.
iPodMountPoints      | Array  | An array of mount points to scan for iPods.
                     |        | Comes in handy for testing purposes or in case
                     |        | you mount your iPod/iPhone via MacFusion (ssh).


For developers
--------------

Name                                | Type | Description
------------------------------------+------+---------------------------------
FUSEObjectFileSystemDebugPathLookup | BOOL | display path objects during
                                    |      | lookup
iTunesFileSystemDebugEnabled        | BOOL | turns on general debugging info
iPodLibraryDebugEnabled             | BOOL | detailed iPodLibrary debugging


Formatters
==========

It's possible to format track names in a generic way providing format strings
either via "AlbumsTrackFormat" or "PlaylistsTrackFormat". The formatters
use a python-like syntax for formatting object properties, i.e.: %(name).
The keys in braces can be complete keypaths. Also, it's possible to provide
a number format to apply to the resulting value, i.e.: %(trackNumber#000).
Currently, track properties of interest are:
- name
- album
- artist
- extension (you can also use "ext" as a convenience)
- trackNumber
- playlistNumber

Here's an example of a more complex formatter:

"#%(trackNumber#00) %(name) (%(artist) - %(album)).%(ext)"

This would produce an output similar to this:

#05 Per Aspera Ad Astra (Moshcircus - Karma).m4a


TODO / IDEAS
============

- expose iTunesTrack metadata to Spotlight
  - would need to gather that metadata (Artist, Album, etc.) first
    (but that's trivial)
- create .fseventsd folder?


References
==========

MacFUSE  - http://code.google.com/p/macfuse/
FUSEObjC - http://macfuse.googlecode.com/svn/trunk/filesystems-objc/FUSEObjC
iTunesFS - http://www.mulle-kybernetik.com/software/iTunesFS
